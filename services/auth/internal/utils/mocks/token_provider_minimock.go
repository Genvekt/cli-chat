// Code generated by http://github.com/gojuno/minimock (v3.3.10). DO NOT EDIT.

package mocks

import (
	"context"
	"sync"
	mm_atomic "sync/atomic"
	mm_time "time"

	"github.com/Genvekt/cli-chat/services/auth/internal/model"
	"github.com/gojuno/minimock/v3"
)

// TokenProviderMock implements utils.TokenProvider
type TokenProviderMock struct {
	t          minimock.Tester
	finishOnce sync.Once

	funcGenerate          func(ctx context.Context, user *model.User) (s1 string, err error)
	inspectFuncGenerate   func(ctx context.Context, user *model.User)
	afterGenerateCounter  uint64
	beforeGenerateCounter uint64
	GenerateMock          mTokenProviderMockGenerate

	funcVerify          func(ctx context.Context, token string) (up1 *model.UserClaims, err error)
	inspectFuncVerify   func(ctx context.Context, token string)
	afterVerifyCounter  uint64
	beforeVerifyCounter uint64
	VerifyMock          mTokenProviderMockVerify
}

// NewTokenProviderMock returns a mock for utils.TokenProvider
func NewTokenProviderMock(t minimock.Tester) *TokenProviderMock {
	m := &TokenProviderMock{t: t}

	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}

	m.GenerateMock = mTokenProviderMockGenerate{mock: m}
	m.GenerateMock.callArgs = []*TokenProviderMockGenerateParams{}

	m.VerifyMock = mTokenProviderMockVerify{mock: m}
	m.VerifyMock.callArgs = []*TokenProviderMockVerifyParams{}

	t.Cleanup(m.MinimockFinish)

	return m
}

type mTokenProviderMockGenerate struct {
	optional           bool
	mock               *TokenProviderMock
	defaultExpectation *TokenProviderMockGenerateExpectation
	expectations       []*TokenProviderMockGenerateExpectation

	callArgs []*TokenProviderMockGenerateParams
	mutex    sync.RWMutex

	expectedInvocations uint64
}

// TokenProviderMockGenerateExpectation specifies expectation struct of the TokenProvider.Generate
type TokenProviderMockGenerateExpectation struct {
	mock      *TokenProviderMock
	params    *TokenProviderMockGenerateParams
	paramPtrs *TokenProviderMockGenerateParamPtrs
	results   *TokenProviderMockGenerateResults
	Counter   uint64
}

// TokenProviderMockGenerateParams contains parameters of the TokenProvider.Generate
type TokenProviderMockGenerateParams struct {
	ctx  context.Context
	user *model.User
}

// TokenProviderMockGenerateParamPtrs contains pointers to parameters of the TokenProvider.Generate
type TokenProviderMockGenerateParamPtrs struct {
	ctx  *context.Context
	user **model.User
}

// TokenProviderMockGenerateResults contains results of the TokenProvider.Generate
type TokenProviderMockGenerateResults struct {
	s1  string
	err error
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option by default unless you really need it, as it helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmGenerate *mTokenProviderMockGenerate) Optional() *mTokenProviderMockGenerate {
	mmGenerate.optional = true
	return mmGenerate
}

// Expect sets up expected params for TokenProvider.Generate
func (mmGenerate *mTokenProviderMockGenerate) Expect(ctx context.Context, user *model.User) *mTokenProviderMockGenerate {
	if mmGenerate.mock.funcGenerate != nil {
		mmGenerate.mock.t.Fatalf("TokenProviderMock.Generate mock is already set by Set")
	}

	if mmGenerate.defaultExpectation == nil {
		mmGenerate.defaultExpectation = &TokenProviderMockGenerateExpectation{}
	}

	if mmGenerate.defaultExpectation.paramPtrs != nil {
		mmGenerate.mock.t.Fatalf("TokenProviderMock.Generate mock is already set by ExpectParams functions")
	}

	mmGenerate.defaultExpectation.params = &TokenProviderMockGenerateParams{ctx, user}
	for _, e := range mmGenerate.expectations {
		if minimock.Equal(e.params, mmGenerate.defaultExpectation.params) {
			mmGenerate.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmGenerate.defaultExpectation.params)
		}
	}

	return mmGenerate
}

// ExpectCtxParam1 sets up expected param ctx for TokenProvider.Generate
func (mmGenerate *mTokenProviderMockGenerate) ExpectCtxParam1(ctx context.Context) *mTokenProviderMockGenerate {
	if mmGenerate.mock.funcGenerate != nil {
		mmGenerate.mock.t.Fatalf("TokenProviderMock.Generate mock is already set by Set")
	}

	if mmGenerate.defaultExpectation == nil {
		mmGenerate.defaultExpectation = &TokenProviderMockGenerateExpectation{}
	}

	if mmGenerate.defaultExpectation.params != nil {
		mmGenerate.mock.t.Fatalf("TokenProviderMock.Generate mock is already set by Expect")
	}

	if mmGenerate.defaultExpectation.paramPtrs == nil {
		mmGenerate.defaultExpectation.paramPtrs = &TokenProviderMockGenerateParamPtrs{}
	}
	mmGenerate.defaultExpectation.paramPtrs.ctx = &ctx

	return mmGenerate
}

// ExpectUserParam2 sets up expected param user for TokenProvider.Generate
func (mmGenerate *mTokenProviderMockGenerate) ExpectUserParam2(user *model.User) *mTokenProviderMockGenerate {
	if mmGenerate.mock.funcGenerate != nil {
		mmGenerate.mock.t.Fatalf("TokenProviderMock.Generate mock is already set by Set")
	}

	if mmGenerate.defaultExpectation == nil {
		mmGenerate.defaultExpectation = &TokenProviderMockGenerateExpectation{}
	}

	if mmGenerate.defaultExpectation.params != nil {
		mmGenerate.mock.t.Fatalf("TokenProviderMock.Generate mock is already set by Expect")
	}

	if mmGenerate.defaultExpectation.paramPtrs == nil {
		mmGenerate.defaultExpectation.paramPtrs = &TokenProviderMockGenerateParamPtrs{}
	}
	mmGenerate.defaultExpectation.paramPtrs.user = &user

	return mmGenerate
}

// Inspect accepts an inspector function that has same arguments as the TokenProvider.Generate
func (mmGenerate *mTokenProviderMockGenerate) Inspect(f func(ctx context.Context, user *model.User)) *mTokenProviderMockGenerate {
	if mmGenerate.mock.inspectFuncGenerate != nil {
		mmGenerate.mock.t.Fatalf("Inspect function is already set for TokenProviderMock.Generate")
	}

	mmGenerate.mock.inspectFuncGenerate = f

	return mmGenerate
}

// Return sets up results that will be returned by TokenProvider.Generate
func (mmGenerate *mTokenProviderMockGenerate) Return(s1 string, err error) *TokenProviderMock {
	if mmGenerate.mock.funcGenerate != nil {
		mmGenerate.mock.t.Fatalf("TokenProviderMock.Generate mock is already set by Set")
	}

	if mmGenerate.defaultExpectation == nil {
		mmGenerate.defaultExpectation = &TokenProviderMockGenerateExpectation{mock: mmGenerate.mock}
	}
	mmGenerate.defaultExpectation.results = &TokenProviderMockGenerateResults{s1, err}
	return mmGenerate.mock
}

// Set uses given function f to mock the TokenProvider.Generate method
func (mmGenerate *mTokenProviderMockGenerate) Set(f func(ctx context.Context, user *model.User) (s1 string, err error)) *TokenProviderMock {
	if mmGenerate.defaultExpectation != nil {
		mmGenerate.mock.t.Fatalf("Default expectation is already set for the TokenProvider.Generate method")
	}

	if len(mmGenerate.expectations) > 0 {
		mmGenerate.mock.t.Fatalf("Some expectations are already set for the TokenProvider.Generate method")
	}

	mmGenerate.mock.funcGenerate = f
	return mmGenerate.mock
}

// When sets expectation for the TokenProvider.Generate which will trigger the result defined by the following
// Then helper
func (mmGenerate *mTokenProviderMockGenerate) When(ctx context.Context, user *model.User) *TokenProviderMockGenerateExpectation {
	if mmGenerate.mock.funcGenerate != nil {
		mmGenerate.mock.t.Fatalf("TokenProviderMock.Generate mock is already set by Set")
	}

	expectation := &TokenProviderMockGenerateExpectation{
		mock:   mmGenerate.mock,
		params: &TokenProviderMockGenerateParams{ctx, user},
	}
	mmGenerate.expectations = append(mmGenerate.expectations, expectation)
	return expectation
}

// Then sets up TokenProvider.Generate return parameters for the expectation previously defined by the When method
func (e *TokenProviderMockGenerateExpectation) Then(s1 string, err error) *TokenProviderMock {
	e.results = &TokenProviderMockGenerateResults{s1, err}
	return e.mock
}

// Times sets number of times TokenProvider.Generate should be invoked
func (mmGenerate *mTokenProviderMockGenerate) Times(n uint64) *mTokenProviderMockGenerate {
	if n == 0 {
		mmGenerate.mock.t.Fatalf("Times of TokenProviderMock.Generate mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmGenerate.expectedInvocations, n)
	return mmGenerate
}

func (mmGenerate *mTokenProviderMockGenerate) invocationsDone() bool {
	if len(mmGenerate.expectations) == 0 && mmGenerate.defaultExpectation == nil && mmGenerate.mock.funcGenerate == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmGenerate.mock.afterGenerateCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmGenerate.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// Generate implements utils.TokenProvider
func (mmGenerate *TokenProviderMock) Generate(ctx context.Context, user *model.User) (s1 string, err error) {
	mm_atomic.AddUint64(&mmGenerate.beforeGenerateCounter, 1)
	defer mm_atomic.AddUint64(&mmGenerate.afterGenerateCounter, 1)

	if mmGenerate.inspectFuncGenerate != nil {
		mmGenerate.inspectFuncGenerate(ctx, user)
	}

	mm_params := TokenProviderMockGenerateParams{ctx, user}

	// Record call args
	mmGenerate.GenerateMock.mutex.Lock()
	mmGenerate.GenerateMock.callArgs = append(mmGenerate.GenerateMock.callArgs, &mm_params)
	mmGenerate.GenerateMock.mutex.Unlock()

	for _, e := range mmGenerate.GenerateMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.s1, e.results.err
		}
	}

	if mmGenerate.GenerateMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmGenerate.GenerateMock.defaultExpectation.Counter, 1)
		mm_want := mmGenerate.GenerateMock.defaultExpectation.params
		mm_want_ptrs := mmGenerate.GenerateMock.defaultExpectation.paramPtrs

		mm_got := TokenProviderMockGenerateParams{ctx, user}

		if mm_want_ptrs != nil {

			if mm_want_ptrs.ctx != nil && !minimock.Equal(*mm_want_ptrs.ctx, mm_got.ctx) {
				mmGenerate.t.Errorf("TokenProviderMock.Generate got unexpected parameter ctx, want: %#v, got: %#v%s\n", *mm_want_ptrs.ctx, mm_got.ctx, minimock.Diff(*mm_want_ptrs.ctx, mm_got.ctx))
			}

			if mm_want_ptrs.user != nil && !minimock.Equal(*mm_want_ptrs.user, mm_got.user) {
				mmGenerate.t.Errorf("TokenProviderMock.Generate got unexpected parameter user, want: %#v, got: %#v%s\n", *mm_want_ptrs.user, mm_got.user, minimock.Diff(*mm_want_ptrs.user, mm_got.user))
			}

		} else if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmGenerate.t.Errorf("TokenProviderMock.Generate got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmGenerate.GenerateMock.defaultExpectation.results
		if mm_results == nil {
			mmGenerate.t.Fatal("No results are set for the TokenProviderMock.Generate")
		}
		return (*mm_results).s1, (*mm_results).err
	}
	if mmGenerate.funcGenerate != nil {
		return mmGenerate.funcGenerate(ctx, user)
	}
	mmGenerate.t.Fatalf("Unexpected call to TokenProviderMock.Generate. %v %v", ctx, user)
	return
}

// GenerateAfterCounter returns a count of finished TokenProviderMock.Generate invocations
func (mmGenerate *TokenProviderMock) GenerateAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGenerate.afterGenerateCounter)
}

// GenerateBeforeCounter returns a count of TokenProviderMock.Generate invocations
func (mmGenerate *TokenProviderMock) GenerateBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGenerate.beforeGenerateCounter)
}

// Calls returns a list of arguments used in each call to TokenProviderMock.Generate.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmGenerate *mTokenProviderMockGenerate) Calls() []*TokenProviderMockGenerateParams {
	mmGenerate.mutex.RLock()

	argCopy := make([]*TokenProviderMockGenerateParams, len(mmGenerate.callArgs))
	copy(argCopy, mmGenerate.callArgs)

	mmGenerate.mutex.RUnlock()

	return argCopy
}

// MinimockGenerateDone returns true if the count of the Generate invocations corresponds
// the number of defined expectations
func (m *TokenProviderMock) MinimockGenerateDone() bool {
	if m.GenerateMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.GenerateMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.GenerateMock.invocationsDone()
}

// MinimockGenerateInspect logs each unmet expectation
func (m *TokenProviderMock) MinimockGenerateInspect() {
	for _, e := range m.GenerateMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to TokenProviderMock.Generate with params: %#v", *e.params)
		}
	}

	afterGenerateCounter := mm_atomic.LoadUint64(&m.afterGenerateCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.GenerateMock.defaultExpectation != nil && afterGenerateCounter < 1 {
		if m.GenerateMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to TokenProviderMock.Generate")
		} else {
			m.t.Errorf("Expected call to TokenProviderMock.Generate with params: %#v", *m.GenerateMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGenerate != nil && afterGenerateCounter < 1 {
		m.t.Error("Expected call to TokenProviderMock.Generate")
	}

	if !m.GenerateMock.invocationsDone() && afterGenerateCounter > 0 {
		m.t.Errorf("Expected %d calls to TokenProviderMock.Generate but found %d calls",
			mm_atomic.LoadUint64(&m.GenerateMock.expectedInvocations), afterGenerateCounter)
	}
}

type mTokenProviderMockVerify struct {
	optional           bool
	mock               *TokenProviderMock
	defaultExpectation *TokenProviderMockVerifyExpectation
	expectations       []*TokenProviderMockVerifyExpectation

	callArgs []*TokenProviderMockVerifyParams
	mutex    sync.RWMutex

	expectedInvocations uint64
}

// TokenProviderMockVerifyExpectation specifies expectation struct of the TokenProvider.Verify
type TokenProviderMockVerifyExpectation struct {
	mock      *TokenProviderMock
	params    *TokenProviderMockVerifyParams
	paramPtrs *TokenProviderMockVerifyParamPtrs
	results   *TokenProviderMockVerifyResults
	Counter   uint64
}

// TokenProviderMockVerifyParams contains parameters of the TokenProvider.Verify
type TokenProviderMockVerifyParams struct {
	ctx   context.Context
	token string
}

// TokenProviderMockVerifyParamPtrs contains pointers to parameters of the TokenProvider.Verify
type TokenProviderMockVerifyParamPtrs struct {
	ctx   *context.Context
	token *string
}

// TokenProviderMockVerifyResults contains results of the TokenProvider.Verify
type TokenProviderMockVerifyResults struct {
	up1 *model.UserClaims
	err error
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option by default unless you really need it, as it helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmVerify *mTokenProviderMockVerify) Optional() *mTokenProviderMockVerify {
	mmVerify.optional = true
	return mmVerify
}

// Expect sets up expected params for TokenProvider.Verify
func (mmVerify *mTokenProviderMockVerify) Expect(ctx context.Context, token string) *mTokenProviderMockVerify {
	if mmVerify.mock.funcVerify != nil {
		mmVerify.mock.t.Fatalf("TokenProviderMock.Verify mock is already set by Set")
	}

	if mmVerify.defaultExpectation == nil {
		mmVerify.defaultExpectation = &TokenProviderMockVerifyExpectation{}
	}

	if mmVerify.defaultExpectation.paramPtrs != nil {
		mmVerify.mock.t.Fatalf("TokenProviderMock.Verify mock is already set by ExpectParams functions")
	}

	mmVerify.defaultExpectation.params = &TokenProviderMockVerifyParams{ctx, token}
	for _, e := range mmVerify.expectations {
		if minimock.Equal(e.params, mmVerify.defaultExpectation.params) {
			mmVerify.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmVerify.defaultExpectation.params)
		}
	}

	return mmVerify
}

// ExpectCtxParam1 sets up expected param ctx for TokenProvider.Verify
func (mmVerify *mTokenProviderMockVerify) ExpectCtxParam1(ctx context.Context) *mTokenProviderMockVerify {
	if mmVerify.mock.funcVerify != nil {
		mmVerify.mock.t.Fatalf("TokenProviderMock.Verify mock is already set by Set")
	}

	if mmVerify.defaultExpectation == nil {
		mmVerify.defaultExpectation = &TokenProviderMockVerifyExpectation{}
	}

	if mmVerify.defaultExpectation.params != nil {
		mmVerify.mock.t.Fatalf("TokenProviderMock.Verify mock is already set by Expect")
	}

	if mmVerify.defaultExpectation.paramPtrs == nil {
		mmVerify.defaultExpectation.paramPtrs = &TokenProviderMockVerifyParamPtrs{}
	}
	mmVerify.defaultExpectation.paramPtrs.ctx = &ctx

	return mmVerify
}

// ExpectTokenParam2 sets up expected param token for TokenProvider.Verify
func (mmVerify *mTokenProviderMockVerify) ExpectTokenParam2(token string) *mTokenProviderMockVerify {
	if mmVerify.mock.funcVerify != nil {
		mmVerify.mock.t.Fatalf("TokenProviderMock.Verify mock is already set by Set")
	}

	if mmVerify.defaultExpectation == nil {
		mmVerify.defaultExpectation = &TokenProviderMockVerifyExpectation{}
	}

	if mmVerify.defaultExpectation.params != nil {
		mmVerify.mock.t.Fatalf("TokenProviderMock.Verify mock is already set by Expect")
	}

	if mmVerify.defaultExpectation.paramPtrs == nil {
		mmVerify.defaultExpectation.paramPtrs = &TokenProviderMockVerifyParamPtrs{}
	}
	mmVerify.defaultExpectation.paramPtrs.token = &token

	return mmVerify
}

// Inspect accepts an inspector function that has same arguments as the TokenProvider.Verify
func (mmVerify *mTokenProviderMockVerify) Inspect(f func(ctx context.Context, token string)) *mTokenProviderMockVerify {
	if mmVerify.mock.inspectFuncVerify != nil {
		mmVerify.mock.t.Fatalf("Inspect function is already set for TokenProviderMock.Verify")
	}

	mmVerify.mock.inspectFuncVerify = f

	return mmVerify
}

// Return sets up results that will be returned by TokenProvider.Verify
func (mmVerify *mTokenProviderMockVerify) Return(up1 *model.UserClaims, err error) *TokenProviderMock {
	if mmVerify.mock.funcVerify != nil {
		mmVerify.mock.t.Fatalf("TokenProviderMock.Verify mock is already set by Set")
	}

	if mmVerify.defaultExpectation == nil {
		mmVerify.defaultExpectation = &TokenProviderMockVerifyExpectation{mock: mmVerify.mock}
	}
	mmVerify.defaultExpectation.results = &TokenProviderMockVerifyResults{up1, err}
	return mmVerify.mock
}

// Set uses given function f to mock the TokenProvider.Verify method
func (mmVerify *mTokenProviderMockVerify) Set(f func(ctx context.Context, token string) (up1 *model.UserClaims, err error)) *TokenProviderMock {
	if mmVerify.defaultExpectation != nil {
		mmVerify.mock.t.Fatalf("Default expectation is already set for the TokenProvider.Verify method")
	}

	if len(mmVerify.expectations) > 0 {
		mmVerify.mock.t.Fatalf("Some expectations are already set for the TokenProvider.Verify method")
	}

	mmVerify.mock.funcVerify = f
	return mmVerify.mock
}

// When sets expectation for the TokenProvider.Verify which will trigger the result defined by the following
// Then helper
func (mmVerify *mTokenProviderMockVerify) When(ctx context.Context, token string) *TokenProviderMockVerifyExpectation {
	if mmVerify.mock.funcVerify != nil {
		mmVerify.mock.t.Fatalf("TokenProviderMock.Verify mock is already set by Set")
	}

	expectation := &TokenProviderMockVerifyExpectation{
		mock:   mmVerify.mock,
		params: &TokenProviderMockVerifyParams{ctx, token},
	}
	mmVerify.expectations = append(mmVerify.expectations, expectation)
	return expectation
}

// Then sets up TokenProvider.Verify return parameters for the expectation previously defined by the When method
func (e *TokenProviderMockVerifyExpectation) Then(up1 *model.UserClaims, err error) *TokenProviderMock {
	e.results = &TokenProviderMockVerifyResults{up1, err}
	return e.mock
}

// Times sets number of times TokenProvider.Verify should be invoked
func (mmVerify *mTokenProviderMockVerify) Times(n uint64) *mTokenProviderMockVerify {
	if n == 0 {
		mmVerify.mock.t.Fatalf("Times of TokenProviderMock.Verify mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmVerify.expectedInvocations, n)
	return mmVerify
}

func (mmVerify *mTokenProviderMockVerify) invocationsDone() bool {
	if len(mmVerify.expectations) == 0 && mmVerify.defaultExpectation == nil && mmVerify.mock.funcVerify == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmVerify.mock.afterVerifyCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmVerify.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// Verify implements utils.TokenProvider
func (mmVerify *TokenProviderMock) Verify(ctx context.Context, token string) (up1 *model.UserClaims, err error) {
	mm_atomic.AddUint64(&mmVerify.beforeVerifyCounter, 1)
	defer mm_atomic.AddUint64(&mmVerify.afterVerifyCounter, 1)

	if mmVerify.inspectFuncVerify != nil {
		mmVerify.inspectFuncVerify(ctx, token)
	}

	mm_params := TokenProviderMockVerifyParams{ctx, token}

	// Record call args
	mmVerify.VerifyMock.mutex.Lock()
	mmVerify.VerifyMock.callArgs = append(mmVerify.VerifyMock.callArgs, &mm_params)
	mmVerify.VerifyMock.mutex.Unlock()

	for _, e := range mmVerify.VerifyMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.up1, e.results.err
		}
	}

	if mmVerify.VerifyMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmVerify.VerifyMock.defaultExpectation.Counter, 1)
		mm_want := mmVerify.VerifyMock.defaultExpectation.params
		mm_want_ptrs := mmVerify.VerifyMock.defaultExpectation.paramPtrs

		mm_got := TokenProviderMockVerifyParams{ctx, token}

		if mm_want_ptrs != nil {

			if mm_want_ptrs.ctx != nil && !minimock.Equal(*mm_want_ptrs.ctx, mm_got.ctx) {
				mmVerify.t.Errorf("TokenProviderMock.Verify got unexpected parameter ctx, want: %#v, got: %#v%s\n", *mm_want_ptrs.ctx, mm_got.ctx, minimock.Diff(*mm_want_ptrs.ctx, mm_got.ctx))
			}

			if mm_want_ptrs.token != nil && !minimock.Equal(*mm_want_ptrs.token, mm_got.token) {
				mmVerify.t.Errorf("TokenProviderMock.Verify got unexpected parameter token, want: %#v, got: %#v%s\n", *mm_want_ptrs.token, mm_got.token, minimock.Diff(*mm_want_ptrs.token, mm_got.token))
			}

		} else if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmVerify.t.Errorf("TokenProviderMock.Verify got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmVerify.VerifyMock.defaultExpectation.results
		if mm_results == nil {
			mmVerify.t.Fatal("No results are set for the TokenProviderMock.Verify")
		}
		return (*mm_results).up1, (*mm_results).err
	}
	if mmVerify.funcVerify != nil {
		return mmVerify.funcVerify(ctx, token)
	}
	mmVerify.t.Fatalf("Unexpected call to TokenProviderMock.Verify. %v %v", ctx, token)
	return
}

// VerifyAfterCounter returns a count of finished TokenProviderMock.Verify invocations
func (mmVerify *TokenProviderMock) VerifyAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmVerify.afterVerifyCounter)
}

// VerifyBeforeCounter returns a count of TokenProviderMock.Verify invocations
func (mmVerify *TokenProviderMock) VerifyBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmVerify.beforeVerifyCounter)
}

// Calls returns a list of arguments used in each call to TokenProviderMock.Verify.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmVerify *mTokenProviderMockVerify) Calls() []*TokenProviderMockVerifyParams {
	mmVerify.mutex.RLock()

	argCopy := make([]*TokenProviderMockVerifyParams, len(mmVerify.callArgs))
	copy(argCopy, mmVerify.callArgs)

	mmVerify.mutex.RUnlock()

	return argCopy
}

// MinimockVerifyDone returns true if the count of the Verify invocations corresponds
// the number of defined expectations
func (m *TokenProviderMock) MinimockVerifyDone() bool {
	if m.VerifyMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.VerifyMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.VerifyMock.invocationsDone()
}

// MinimockVerifyInspect logs each unmet expectation
func (m *TokenProviderMock) MinimockVerifyInspect() {
	for _, e := range m.VerifyMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to TokenProviderMock.Verify with params: %#v", *e.params)
		}
	}

	afterVerifyCounter := mm_atomic.LoadUint64(&m.afterVerifyCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.VerifyMock.defaultExpectation != nil && afterVerifyCounter < 1 {
		if m.VerifyMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to TokenProviderMock.Verify")
		} else {
			m.t.Errorf("Expected call to TokenProviderMock.Verify with params: %#v", *m.VerifyMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcVerify != nil && afterVerifyCounter < 1 {
		m.t.Error("Expected call to TokenProviderMock.Verify")
	}

	if !m.VerifyMock.invocationsDone() && afterVerifyCounter > 0 {
		m.t.Errorf("Expected %d calls to TokenProviderMock.Verify but found %d calls",
			mm_atomic.LoadUint64(&m.VerifyMock.expectedInvocations), afterVerifyCounter)
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *TokenProviderMock) MinimockFinish() {
	m.finishOnce.Do(func() {
		if !m.minimockDone() {
			m.MinimockGenerateInspect()

			m.MinimockVerifyInspect()
			m.t.FailNow()
		}
	})
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *TokenProviderMock) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *TokenProviderMock) minimockDone() bool {
	done := true
	return done &&
		m.MinimockGenerateDone() &&
		m.MinimockVerifyDone()
}
