// Code generated by http://github.com/gojuno/minimock (v3.3.10). DO NOT EDIT.

package mocks

import (
	"sync"
	mm_atomic "sync/atomic"
	"time"
	mm_time "time"

	"github.com/gojuno/minimock/v3"
)

// UserServiceConfigMock implements config.UserServiceConfig
type UserServiceConfigMock struct {
	t          minimock.Tester
	finishOnce sync.Once

	funcCacheTTL          func() (d1 time.Duration)
	inspectFuncCacheTTL   func()
	afterCacheTTLCounter  uint64
	beforeCacheTTLCounter uint64
	CacheTTLMock          mUserServiceConfigMockCacheTTL
}

// NewUserServiceConfigMock returns a mock for config.UserServiceConfig
func NewUserServiceConfigMock(t minimock.Tester) *UserServiceConfigMock {
	m := &UserServiceConfigMock{t: t}

	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}

	m.CacheTTLMock = mUserServiceConfigMockCacheTTL{mock: m}

	t.Cleanup(m.MinimockFinish)

	return m
}

type mUserServiceConfigMockCacheTTL struct {
	optional           bool
	mock               *UserServiceConfigMock
	defaultExpectation *UserServiceConfigMockCacheTTLExpectation
	expectations       []*UserServiceConfigMockCacheTTLExpectation

	expectedInvocations uint64
}

// UserServiceConfigMockCacheTTLExpectation specifies expectation struct of the UserServiceConfig.CacheTTL
type UserServiceConfigMockCacheTTLExpectation struct {
	mock *UserServiceConfigMock

	results *UserServiceConfigMockCacheTTLResults
	Counter uint64
}

// UserServiceConfigMockCacheTTLResults contains results of the UserServiceConfig.CacheTTL
type UserServiceConfigMockCacheTTLResults struct {
	d1 time.Duration
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option by default unless you really need it, as it helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmCacheTTL *mUserServiceConfigMockCacheTTL) Optional() *mUserServiceConfigMockCacheTTL {
	mmCacheTTL.optional = true
	return mmCacheTTL
}

// Expect sets up expected params for UserServiceConfig.CacheTTL
func (mmCacheTTL *mUserServiceConfigMockCacheTTL) Expect() *mUserServiceConfigMockCacheTTL {
	if mmCacheTTL.mock.funcCacheTTL != nil {
		mmCacheTTL.mock.t.Fatalf("UserServiceConfigMock.CacheTTL mock is already set by Set")
	}

	if mmCacheTTL.defaultExpectation == nil {
		mmCacheTTL.defaultExpectation = &UserServiceConfigMockCacheTTLExpectation{}
	}

	return mmCacheTTL
}

// Inspect accepts an inspector function that has same arguments as the UserServiceConfig.CacheTTL
func (mmCacheTTL *mUserServiceConfigMockCacheTTL) Inspect(f func()) *mUserServiceConfigMockCacheTTL {
	if mmCacheTTL.mock.inspectFuncCacheTTL != nil {
		mmCacheTTL.mock.t.Fatalf("Inspect function is already set for UserServiceConfigMock.CacheTTL")
	}

	mmCacheTTL.mock.inspectFuncCacheTTL = f

	return mmCacheTTL
}

// Return sets up results that will be returned by UserServiceConfig.CacheTTL
func (mmCacheTTL *mUserServiceConfigMockCacheTTL) Return(d1 time.Duration) *UserServiceConfigMock {
	if mmCacheTTL.mock.funcCacheTTL != nil {
		mmCacheTTL.mock.t.Fatalf("UserServiceConfigMock.CacheTTL mock is already set by Set")
	}

	if mmCacheTTL.defaultExpectation == nil {
		mmCacheTTL.defaultExpectation = &UserServiceConfigMockCacheTTLExpectation{mock: mmCacheTTL.mock}
	}
	mmCacheTTL.defaultExpectation.results = &UserServiceConfigMockCacheTTLResults{d1}
	return mmCacheTTL.mock
}

// Set uses given function f to mock the UserServiceConfig.CacheTTL method
func (mmCacheTTL *mUserServiceConfigMockCacheTTL) Set(f func() (d1 time.Duration)) *UserServiceConfigMock {
	if mmCacheTTL.defaultExpectation != nil {
		mmCacheTTL.mock.t.Fatalf("Default expectation is already set for the UserServiceConfig.CacheTTL method")
	}

	if len(mmCacheTTL.expectations) > 0 {
		mmCacheTTL.mock.t.Fatalf("Some expectations are already set for the UserServiceConfig.CacheTTL method")
	}

	mmCacheTTL.mock.funcCacheTTL = f
	return mmCacheTTL.mock
}

// Times sets number of times UserServiceConfig.CacheTTL should be invoked
func (mmCacheTTL *mUserServiceConfigMockCacheTTL) Times(n uint64) *mUserServiceConfigMockCacheTTL {
	if n == 0 {
		mmCacheTTL.mock.t.Fatalf("Times of UserServiceConfigMock.CacheTTL mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmCacheTTL.expectedInvocations, n)
	return mmCacheTTL
}

func (mmCacheTTL *mUserServiceConfigMockCacheTTL) invocationsDone() bool {
	if len(mmCacheTTL.expectations) == 0 && mmCacheTTL.defaultExpectation == nil && mmCacheTTL.mock.funcCacheTTL == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmCacheTTL.mock.afterCacheTTLCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmCacheTTL.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// CacheTTL implements config.UserServiceConfig
func (mmCacheTTL *UserServiceConfigMock) CacheTTL() (d1 time.Duration) {
	mm_atomic.AddUint64(&mmCacheTTL.beforeCacheTTLCounter, 1)
	defer mm_atomic.AddUint64(&mmCacheTTL.afterCacheTTLCounter, 1)

	if mmCacheTTL.inspectFuncCacheTTL != nil {
		mmCacheTTL.inspectFuncCacheTTL()
	}

	if mmCacheTTL.CacheTTLMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmCacheTTL.CacheTTLMock.defaultExpectation.Counter, 1)

		mm_results := mmCacheTTL.CacheTTLMock.defaultExpectation.results
		if mm_results == nil {
			mmCacheTTL.t.Fatal("No results are set for the UserServiceConfigMock.CacheTTL")
		}
		return (*mm_results).d1
	}
	if mmCacheTTL.funcCacheTTL != nil {
		return mmCacheTTL.funcCacheTTL()
	}
	mmCacheTTL.t.Fatalf("Unexpected call to UserServiceConfigMock.CacheTTL.")
	return
}

// CacheTTLAfterCounter returns a count of finished UserServiceConfigMock.CacheTTL invocations
func (mmCacheTTL *UserServiceConfigMock) CacheTTLAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmCacheTTL.afterCacheTTLCounter)
}

// CacheTTLBeforeCounter returns a count of UserServiceConfigMock.CacheTTL invocations
func (mmCacheTTL *UserServiceConfigMock) CacheTTLBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmCacheTTL.beforeCacheTTLCounter)
}

// MinimockCacheTTLDone returns true if the count of the CacheTTL invocations corresponds
// the number of defined expectations
func (m *UserServiceConfigMock) MinimockCacheTTLDone() bool {
	if m.CacheTTLMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.CacheTTLMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.CacheTTLMock.invocationsDone()
}

// MinimockCacheTTLInspect logs each unmet expectation
func (m *UserServiceConfigMock) MinimockCacheTTLInspect() {
	for _, e := range m.CacheTTLMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Error("Expected call to UserServiceConfigMock.CacheTTL")
		}
	}

	afterCacheTTLCounter := mm_atomic.LoadUint64(&m.afterCacheTTLCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.CacheTTLMock.defaultExpectation != nil && afterCacheTTLCounter < 1 {
		m.t.Error("Expected call to UserServiceConfigMock.CacheTTL")
	}
	// if func was set then invocations count should be greater than zero
	if m.funcCacheTTL != nil && afterCacheTTLCounter < 1 {
		m.t.Error("Expected call to UserServiceConfigMock.CacheTTL")
	}

	if !m.CacheTTLMock.invocationsDone() && afterCacheTTLCounter > 0 {
		m.t.Errorf("Expected %d calls to UserServiceConfigMock.CacheTTL but found %d calls",
			mm_atomic.LoadUint64(&m.CacheTTLMock.expectedInvocations), afterCacheTTLCounter)
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *UserServiceConfigMock) MinimockFinish() {
	m.finishOnce.Do(func() {
		if !m.minimockDone() {
			m.MinimockCacheTTLInspect()
			m.t.FailNow()
		}
	})
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *UserServiceConfigMock) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *UserServiceConfigMock) minimockDone() bool {
	done := true
	return done &&
		m.MinimockCacheTTLDone()
}
