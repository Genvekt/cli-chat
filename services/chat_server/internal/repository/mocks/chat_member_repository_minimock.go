// Code generated by http://github.com/gojuno/minimock (v3.3.10). DO NOT EDIT.

package mocks

import (
	"context"
	"sync"
	mm_atomic "sync/atomic"
	mm_time "time"

	"github.com/Genvekt/cli-chat/services/chat-server/internal/model"
	"github.com/gojuno/minimock/v3"
)

// ChatMemberRepositoryMock implements repository.ChatMemberRepository
type ChatMemberRepositoryMock struct {
	t          minimock.Tester
	finishOnce sync.Once

	funcCreateBatch          func(ctx context.Context, chatID int64, userIDs []int64) (err error)
	inspectFuncCreateBatch   func(ctx context.Context, chatID int64, userIDs []int64)
	afterCreateBatchCounter  uint64
	beforeCreateBatchCounter uint64
	CreateBatchMock          mChatMemberRepositoryMockCreateBatch

	funcGet          func(ctx context.Context, chatID int64, userID int64) (cp1 *model.ChatMember, err error)
	inspectFuncGet   func(ctx context.Context, chatID int64, userID int64)
	afterGetCounter  uint64
	beforeGetCounter uint64
	GetMock          mChatMemberRepositoryMockGet
}

// NewChatMemberRepositoryMock returns a mock for repository.ChatMemberRepository
func NewChatMemberRepositoryMock(t minimock.Tester) *ChatMemberRepositoryMock {
	m := &ChatMemberRepositoryMock{t: t}

	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}

	m.CreateBatchMock = mChatMemberRepositoryMockCreateBatch{mock: m}
	m.CreateBatchMock.callArgs = []*ChatMemberRepositoryMockCreateBatchParams{}

	m.GetMock = mChatMemberRepositoryMockGet{mock: m}
	m.GetMock.callArgs = []*ChatMemberRepositoryMockGetParams{}

	t.Cleanup(m.MinimockFinish)

	return m
}

type mChatMemberRepositoryMockCreateBatch struct {
	optional           bool
	mock               *ChatMemberRepositoryMock
	defaultExpectation *ChatMemberRepositoryMockCreateBatchExpectation
	expectations       []*ChatMemberRepositoryMockCreateBatchExpectation

	callArgs []*ChatMemberRepositoryMockCreateBatchParams
	mutex    sync.RWMutex

	expectedInvocations uint64
}

// ChatMemberRepositoryMockCreateBatchExpectation specifies expectation struct of the ChatMemberRepository.CreateBatch
type ChatMemberRepositoryMockCreateBatchExpectation struct {
	mock      *ChatMemberRepositoryMock
	params    *ChatMemberRepositoryMockCreateBatchParams
	paramPtrs *ChatMemberRepositoryMockCreateBatchParamPtrs
	results   *ChatMemberRepositoryMockCreateBatchResults
	Counter   uint64
}

// ChatMemberRepositoryMockCreateBatchParams contains parameters of the ChatMemberRepository.CreateBatch
type ChatMemberRepositoryMockCreateBatchParams struct {
	ctx     context.Context
	chatID  int64
	userIDs []int64
}

// ChatMemberRepositoryMockCreateBatchParamPtrs contains pointers to parameters of the ChatMemberRepository.CreateBatch
type ChatMemberRepositoryMockCreateBatchParamPtrs struct {
	ctx     *context.Context
	chatID  *int64
	userIDs *[]int64
}

// ChatMemberRepositoryMockCreateBatchResults contains results of the ChatMemberRepository.CreateBatch
type ChatMemberRepositoryMockCreateBatchResults struct {
	err error
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option by default unless you really need it, as it helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmCreateBatch *mChatMemberRepositoryMockCreateBatch) Optional() *mChatMemberRepositoryMockCreateBatch {
	mmCreateBatch.optional = true
	return mmCreateBatch
}

// Expect sets up expected params for ChatMemberRepository.CreateBatch
func (mmCreateBatch *mChatMemberRepositoryMockCreateBatch) Expect(ctx context.Context, chatID int64, userIDs []int64) *mChatMemberRepositoryMockCreateBatch {
	if mmCreateBatch.mock.funcCreateBatch != nil {
		mmCreateBatch.mock.t.Fatalf("ChatMemberRepositoryMock.CreateBatch mock is already set by Set")
	}

	if mmCreateBatch.defaultExpectation == nil {
		mmCreateBatch.defaultExpectation = &ChatMemberRepositoryMockCreateBatchExpectation{}
	}

	if mmCreateBatch.defaultExpectation.paramPtrs != nil {
		mmCreateBatch.mock.t.Fatalf("ChatMemberRepositoryMock.CreateBatch mock is already set by ExpectParams functions")
	}

	mmCreateBatch.defaultExpectation.params = &ChatMemberRepositoryMockCreateBatchParams{ctx, chatID, userIDs}
	for _, e := range mmCreateBatch.expectations {
		if minimock.Equal(e.params, mmCreateBatch.defaultExpectation.params) {
			mmCreateBatch.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmCreateBatch.defaultExpectation.params)
		}
	}

	return mmCreateBatch
}

// ExpectCtxParam1 sets up expected param ctx for ChatMemberRepository.CreateBatch
func (mmCreateBatch *mChatMemberRepositoryMockCreateBatch) ExpectCtxParam1(ctx context.Context) *mChatMemberRepositoryMockCreateBatch {
	if mmCreateBatch.mock.funcCreateBatch != nil {
		mmCreateBatch.mock.t.Fatalf("ChatMemberRepositoryMock.CreateBatch mock is already set by Set")
	}

	if mmCreateBatch.defaultExpectation == nil {
		mmCreateBatch.defaultExpectation = &ChatMemberRepositoryMockCreateBatchExpectation{}
	}

	if mmCreateBatch.defaultExpectation.params != nil {
		mmCreateBatch.mock.t.Fatalf("ChatMemberRepositoryMock.CreateBatch mock is already set by Expect")
	}

	if mmCreateBatch.defaultExpectation.paramPtrs == nil {
		mmCreateBatch.defaultExpectation.paramPtrs = &ChatMemberRepositoryMockCreateBatchParamPtrs{}
	}
	mmCreateBatch.defaultExpectation.paramPtrs.ctx = &ctx

	return mmCreateBatch
}

// ExpectChatIDParam2 sets up expected param chatID for ChatMemberRepository.CreateBatch
func (mmCreateBatch *mChatMemberRepositoryMockCreateBatch) ExpectChatIDParam2(chatID int64) *mChatMemberRepositoryMockCreateBatch {
	if mmCreateBatch.mock.funcCreateBatch != nil {
		mmCreateBatch.mock.t.Fatalf("ChatMemberRepositoryMock.CreateBatch mock is already set by Set")
	}

	if mmCreateBatch.defaultExpectation == nil {
		mmCreateBatch.defaultExpectation = &ChatMemberRepositoryMockCreateBatchExpectation{}
	}

	if mmCreateBatch.defaultExpectation.params != nil {
		mmCreateBatch.mock.t.Fatalf("ChatMemberRepositoryMock.CreateBatch mock is already set by Expect")
	}

	if mmCreateBatch.defaultExpectation.paramPtrs == nil {
		mmCreateBatch.defaultExpectation.paramPtrs = &ChatMemberRepositoryMockCreateBatchParamPtrs{}
	}
	mmCreateBatch.defaultExpectation.paramPtrs.chatID = &chatID

	return mmCreateBatch
}

// ExpectUserIDsParam3 sets up expected param userIDs for ChatMemberRepository.CreateBatch
func (mmCreateBatch *mChatMemberRepositoryMockCreateBatch) ExpectUserIDsParam3(userIDs []int64) *mChatMemberRepositoryMockCreateBatch {
	if mmCreateBatch.mock.funcCreateBatch != nil {
		mmCreateBatch.mock.t.Fatalf("ChatMemberRepositoryMock.CreateBatch mock is already set by Set")
	}

	if mmCreateBatch.defaultExpectation == nil {
		mmCreateBatch.defaultExpectation = &ChatMemberRepositoryMockCreateBatchExpectation{}
	}

	if mmCreateBatch.defaultExpectation.params != nil {
		mmCreateBatch.mock.t.Fatalf("ChatMemberRepositoryMock.CreateBatch mock is already set by Expect")
	}

	if mmCreateBatch.defaultExpectation.paramPtrs == nil {
		mmCreateBatch.defaultExpectation.paramPtrs = &ChatMemberRepositoryMockCreateBatchParamPtrs{}
	}
	mmCreateBatch.defaultExpectation.paramPtrs.userIDs = &userIDs

	return mmCreateBatch
}

// Inspect accepts an inspector function that has same arguments as the ChatMemberRepository.CreateBatch
func (mmCreateBatch *mChatMemberRepositoryMockCreateBatch) Inspect(f func(ctx context.Context, chatID int64, userIDs []int64)) *mChatMemberRepositoryMockCreateBatch {
	if mmCreateBatch.mock.inspectFuncCreateBatch != nil {
		mmCreateBatch.mock.t.Fatalf("Inspect function is already set for ChatMemberRepositoryMock.CreateBatch")
	}

	mmCreateBatch.mock.inspectFuncCreateBatch = f

	return mmCreateBatch
}

// Return sets up results that will be returned by ChatMemberRepository.CreateBatch
func (mmCreateBatch *mChatMemberRepositoryMockCreateBatch) Return(err error) *ChatMemberRepositoryMock {
	if mmCreateBatch.mock.funcCreateBatch != nil {
		mmCreateBatch.mock.t.Fatalf("ChatMemberRepositoryMock.CreateBatch mock is already set by Set")
	}

	if mmCreateBatch.defaultExpectation == nil {
		mmCreateBatch.defaultExpectation = &ChatMemberRepositoryMockCreateBatchExpectation{mock: mmCreateBatch.mock}
	}
	mmCreateBatch.defaultExpectation.results = &ChatMemberRepositoryMockCreateBatchResults{err}
	return mmCreateBatch.mock
}

// Set uses given function f to mock the ChatMemberRepository.CreateBatch method
func (mmCreateBatch *mChatMemberRepositoryMockCreateBatch) Set(f func(ctx context.Context, chatID int64, userIDs []int64) (err error)) *ChatMemberRepositoryMock {
	if mmCreateBatch.defaultExpectation != nil {
		mmCreateBatch.mock.t.Fatalf("Default expectation is already set for the ChatMemberRepository.CreateBatch method")
	}

	if len(mmCreateBatch.expectations) > 0 {
		mmCreateBatch.mock.t.Fatalf("Some expectations are already set for the ChatMemberRepository.CreateBatch method")
	}

	mmCreateBatch.mock.funcCreateBatch = f
	return mmCreateBatch.mock
}

// When sets expectation for the ChatMemberRepository.CreateBatch which will trigger the result defined by the following
// Then helper
func (mmCreateBatch *mChatMemberRepositoryMockCreateBatch) When(ctx context.Context, chatID int64, userIDs []int64) *ChatMemberRepositoryMockCreateBatchExpectation {
	if mmCreateBatch.mock.funcCreateBatch != nil {
		mmCreateBatch.mock.t.Fatalf("ChatMemberRepositoryMock.CreateBatch mock is already set by Set")
	}

	expectation := &ChatMemberRepositoryMockCreateBatchExpectation{
		mock:   mmCreateBatch.mock,
		params: &ChatMemberRepositoryMockCreateBatchParams{ctx, chatID, userIDs},
	}
	mmCreateBatch.expectations = append(mmCreateBatch.expectations, expectation)
	return expectation
}

// Then sets up ChatMemberRepository.CreateBatch return parameters for the expectation previously defined by the When method
func (e *ChatMemberRepositoryMockCreateBatchExpectation) Then(err error) *ChatMemberRepositoryMock {
	e.results = &ChatMemberRepositoryMockCreateBatchResults{err}
	return e.mock
}

// Times sets number of times ChatMemberRepository.CreateBatch should be invoked
func (mmCreateBatch *mChatMemberRepositoryMockCreateBatch) Times(n uint64) *mChatMemberRepositoryMockCreateBatch {
	if n == 0 {
		mmCreateBatch.mock.t.Fatalf("Times of ChatMemberRepositoryMock.CreateBatch mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmCreateBatch.expectedInvocations, n)
	return mmCreateBatch
}

func (mmCreateBatch *mChatMemberRepositoryMockCreateBatch) invocationsDone() bool {
	if len(mmCreateBatch.expectations) == 0 && mmCreateBatch.defaultExpectation == nil && mmCreateBatch.mock.funcCreateBatch == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmCreateBatch.mock.afterCreateBatchCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmCreateBatch.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// CreateBatch implements repository.ChatMemberRepository
func (mmCreateBatch *ChatMemberRepositoryMock) CreateBatch(ctx context.Context, chatID int64, userIDs []int64) (err error) {
	mm_atomic.AddUint64(&mmCreateBatch.beforeCreateBatchCounter, 1)
	defer mm_atomic.AddUint64(&mmCreateBatch.afterCreateBatchCounter, 1)

	if mmCreateBatch.inspectFuncCreateBatch != nil {
		mmCreateBatch.inspectFuncCreateBatch(ctx, chatID, userIDs)
	}

	mm_params := ChatMemberRepositoryMockCreateBatchParams{ctx, chatID, userIDs}

	// Record call args
	mmCreateBatch.CreateBatchMock.mutex.Lock()
	mmCreateBatch.CreateBatchMock.callArgs = append(mmCreateBatch.CreateBatchMock.callArgs, &mm_params)
	mmCreateBatch.CreateBatchMock.mutex.Unlock()

	for _, e := range mmCreateBatch.CreateBatchMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.err
		}
	}

	if mmCreateBatch.CreateBatchMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmCreateBatch.CreateBatchMock.defaultExpectation.Counter, 1)
		mm_want := mmCreateBatch.CreateBatchMock.defaultExpectation.params
		mm_want_ptrs := mmCreateBatch.CreateBatchMock.defaultExpectation.paramPtrs

		mm_got := ChatMemberRepositoryMockCreateBatchParams{ctx, chatID, userIDs}

		if mm_want_ptrs != nil {

			if mm_want_ptrs.ctx != nil && !minimock.Equal(*mm_want_ptrs.ctx, mm_got.ctx) {
				mmCreateBatch.t.Errorf("ChatMemberRepositoryMock.CreateBatch got unexpected parameter ctx, want: %#v, got: %#v%s\n", *mm_want_ptrs.ctx, mm_got.ctx, minimock.Diff(*mm_want_ptrs.ctx, mm_got.ctx))
			}

			if mm_want_ptrs.chatID != nil && !minimock.Equal(*mm_want_ptrs.chatID, mm_got.chatID) {
				mmCreateBatch.t.Errorf("ChatMemberRepositoryMock.CreateBatch got unexpected parameter chatID, want: %#v, got: %#v%s\n", *mm_want_ptrs.chatID, mm_got.chatID, minimock.Diff(*mm_want_ptrs.chatID, mm_got.chatID))
			}

			if mm_want_ptrs.userIDs != nil && !minimock.Equal(*mm_want_ptrs.userIDs, mm_got.userIDs) {
				mmCreateBatch.t.Errorf("ChatMemberRepositoryMock.CreateBatch got unexpected parameter userIDs, want: %#v, got: %#v%s\n", *mm_want_ptrs.userIDs, mm_got.userIDs, minimock.Diff(*mm_want_ptrs.userIDs, mm_got.userIDs))
			}

		} else if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmCreateBatch.t.Errorf("ChatMemberRepositoryMock.CreateBatch got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmCreateBatch.CreateBatchMock.defaultExpectation.results
		if mm_results == nil {
			mmCreateBatch.t.Fatal("No results are set for the ChatMemberRepositoryMock.CreateBatch")
		}
		return (*mm_results).err
	}
	if mmCreateBatch.funcCreateBatch != nil {
		return mmCreateBatch.funcCreateBatch(ctx, chatID, userIDs)
	}
	mmCreateBatch.t.Fatalf("Unexpected call to ChatMemberRepositoryMock.CreateBatch. %v %v %v", ctx, chatID, userIDs)
	return
}

// CreateBatchAfterCounter returns a count of finished ChatMemberRepositoryMock.CreateBatch invocations
func (mmCreateBatch *ChatMemberRepositoryMock) CreateBatchAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmCreateBatch.afterCreateBatchCounter)
}

// CreateBatchBeforeCounter returns a count of ChatMemberRepositoryMock.CreateBatch invocations
func (mmCreateBatch *ChatMemberRepositoryMock) CreateBatchBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmCreateBatch.beforeCreateBatchCounter)
}

// Calls returns a list of arguments used in each call to ChatMemberRepositoryMock.CreateBatch.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmCreateBatch *mChatMemberRepositoryMockCreateBatch) Calls() []*ChatMemberRepositoryMockCreateBatchParams {
	mmCreateBatch.mutex.RLock()

	argCopy := make([]*ChatMemberRepositoryMockCreateBatchParams, len(mmCreateBatch.callArgs))
	copy(argCopy, mmCreateBatch.callArgs)

	mmCreateBatch.mutex.RUnlock()

	return argCopy
}

// MinimockCreateBatchDone returns true if the count of the CreateBatch invocations corresponds
// the number of defined expectations
func (m *ChatMemberRepositoryMock) MinimockCreateBatchDone() bool {
	if m.CreateBatchMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.CreateBatchMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.CreateBatchMock.invocationsDone()
}

// MinimockCreateBatchInspect logs each unmet expectation
func (m *ChatMemberRepositoryMock) MinimockCreateBatchInspect() {
	for _, e := range m.CreateBatchMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to ChatMemberRepositoryMock.CreateBatch with params: %#v", *e.params)
		}
	}

	afterCreateBatchCounter := mm_atomic.LoadUint64(&m.afterCreateBatchCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.CreateBatchMock.defaultExpectation != nil && afterCreateBatchCounter < 1 {
		if m.CreateBatchMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to ChatMemberRepositoryMock.CreateBatch")
		} else {
			m.t.Errorf("Expected call to ChatMemberRepositoryMock.CreateBatch with params: %#v", *m.CreateBatchMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcCreateBatch != nil && afterCreateBatchCounter < 1 {
		m.t.Error("Expected call to ChatMemberRepositoryMock.CreateBatch")
	}

	if !m.CreateBatchMock.invocationsDone() && afterCreateBatchCounter > 0 {
		m.t.Errorf("Expected %d calls to ChatMemberRepositoryMock.CreateBatch but found %d calls",
			mm_atomic.LoadUint64(&m.CreateBatchMock.expectedInvocations), afterCreateBatchCounter)
	}
}

type mChatMemberRepositoryMockGet struct {
	optional           bool
	mock               *ChatMemberRepositoryMock
	defaultExpectation *ChatMemberRepositoryMockGetExpectation
	expectations       []*ChatMemberRepositoryMockGetExpectation

	callArgs []*ChatMemberRepositoryMockGetParams
	mutex    sync.RWMutex

	expectedInvocations uint64
}

// ChatMemberRepositoryMockGetExpectation specifies expectation struct of the ChatMemberRepository.Get
type ChatMemberRepositoryMockGetExpectation struct {
	mock      *ChatMemberRepositoryMock
	params    *ChatMemberRepositoryMockGetParams
	paramPtrs *ChatMemberRepositoryMockGetParamPtrs
	results   *ChatMemberRepositoryMockGetResults
	Counter   uint64
}

// ChatMemberRepositoryMockGetParams contains parameters of the ChatMemberRepository.Get
type ChatMemberRepositoryMockGetParams struct {
	ctx    context.Context
	chatID int64
	userID int64
}

// ChatMemberRepositoryMockGetParamPtrs contains pointers to parameters of the ChatMemberRepository.Get
type ChatMemberRepositoryMockGetParamPtrs struct {
	ctx    *context.Context
	chatID *int64
	userID *int64
}

// ChatMemberRepositoryMockGetResults contains results of the ChatMemberRepository.Get
type ChatMemberRepositoryMockGetResults struct {
	cp1 *model.ChatMember
	err error
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option by default unless you really need it, as it helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmGet *mChatMemberRepositoryMockGet) Optional() *mChatMemberRepositoryMockGet {
	mmGet.optional = true
	return mmGet
}

// Expect sets up expected params for ChatMemberRepository.Get
func (mmGet *mChatMemberRepositoryMockGet) Expect(ctx context.Context, chatID int64, userID int64) *mChatMemberRepositoryMockGet {
	if mmGet.mock.funcGet != nil {
		mmGet.mock.t.Fatalf("ChatMemberRepositoryMock.Get mock is already set by Set")
	}

	if mmGet.defaultExpectation == nil {
		mmGet.defaultExpectation = &ChatMemberRepositoryMockGetExpectation{}
	}

	if mmGet.defaultExpectation.paramPtrs != nil {
		mmGet.mock.t.Fatalf("ChatMemberRepositoryMock.Get mock is already set by ExpectParams functions")
	}

	mmGet.defaultExpectation.params = &ChatMemberRepositoryMockGetParams{ctx, chatID, userID}
	for _, e := range mmGet.expectations {
		if minimock.Equal(e.params, mmGet.defaultExpectation.params) {
			mmGet.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmGet.defaultExpectation.params)
		}
	}

	return mmGet
}

// ExpectCtxParam1 sets up expected param ctx for ChatMemberRepository.Get
func (mmGet *mChatMemberRepositoryMockGet) ExpectCtxParam1(ctx context.Context) *mChatMemberRepositoryMockGet {
	if mmGet.mock.funcGet != nil {
		mmGet.mock.t.Fatalf("ChatMemberRepositoryMock.Get mock is already set by Set")
	}

	if mmGet.defaultExpectation == nil {
		mmGet.defaultExpectation = &ChatMemberRepositoryMockGetExpectation{}
	}

	if mmGet.defaultExpectation.params != nil {
		mmGet.mock.t.Fatalf("ChatMemberRepositoryMock.Get mock is already set by Expect")
	}

	if mmGet.defaultExpectation.paramPtrs == nil {
		mmGet.defaultExpectation.paramPtrs = &ChatMemberRepositoryMockGetParamPtrs{}
	}
	mmGet.defaultExpectation.paramPtrs.ctx = &ctx

	return mmGet
}

// ExpectChatIDParam2 sets up expected param chatID for ChatMemberRepository.Get
func (mmGet *mChatMemberRepositoryMockGet) ExpectChatIDParam2(chatID int64) *mChatMemberRepositoryMockGet {
	if mmGet.mock.funcGet != nil {
		mmGet.mock.t.Fatalf("ChatMemberRepositoryMock.Get mock is already set by Set")
	}

	if mmGet.defaultExpectation == nil {
		mmGet.defaultExpectation = &ChatMemberRepositoryMockGetExpectation{}
	}

	if mmGet.defaultExpectation.params != nil {
		mmGet.mock.t.Fatalf("ChatMemberRepositoryMock.Get mock is already set by Expect")
	}

	if mmGet.defaultExpectation.paramPtrs == nil {
		mmGet.defaultExpectation.paramPtrs = &ChatMemberRepositoryMockGetParamPtrs{}
	}
	mmGet.defaultExpectation.paramPtrs.chatID = &chatID

	return mmGet
}

// ExpectUserIDParam3 sets up expected param userID for ChatMemberRepository.Get
func (mmGet *mChatMemberRepositoryMockGet) ExpectUserIDParam3(userID int64) *mChatMemberRepositoryMockGet {
	if mmGet.mock.funcGet != nil {
		mmGet.mock.t.Fatalf("ChatMemberRepositoryMock.Get mock is already set by Set")
	}

	if mmGet.defaultExpectation == nil {
		mmGet.defaultExpectation = &ChatMemberRepositoryMockGetExpectation{}
	}

	if mmGet.defaultExpectation.params != nil {
		mmGet.mock.t.Fatalf("ChatMemberRepositoryMock.Get mock is already set by Expect")
	}

	if mmGet.defaultExpectation.paramPtrs == nil {
		mmGet.defaultExpectation.paramPtrs = &ChatMemberRepositoryMockGetParamPtrs{}
	}
	mmGet.defaultExpectation.paramPtrs.userID = &userID

	return mmGet
}

// Inspect accepts an inspector function that has same arguments as the ChatMemberRepository.Get
func (mmGet *mChatMemberRepositoryMockGet) Inspect(f func(ctx context.Context, chatID int64, userID int64)) *mChatMemberRepositoryMockGet {
	if mmGet.mock.inspectFuncGet != nil {
		mmGet.mock.t.Fatalf("Inspect function is already set for ChatMemberRepositoryMock.Get")
	}

	mmGet.mock.inspectFuncGet = f

	return mmGet
}

// Return sets up results that will be returned by ChatMemberRepository.Get
func (mmGet *mChatMemberRepositoryMockGet) Return(cp1 *model.ChatMember, err error) *ChatMemberRepositoryMock {
	if mmGet.mock.funcGet != nil {
		mmGet.mock.t.Fatalf("ChatMemberRepositoryMock.Get mock is already set by Set")
	}

	if mmGet.defaultExpectation == nil {
		mmGet.defaultExpectation = &ChatMemberRepositoryMockGetExpectation{mock: mmGet.mock}
	}
	mmGet.defaultExpectation.results = &ChatMemberRepositoryMockGetResults{cp1, err}
	return mmGet.mock
}

// Set uses given function f to mock the ChatMemberRepository.Get method
func (mmGet *mChatMemberRepositoryMockGet) Set(f func(ctx context.Context, chatID int64, userID int64) (cp1 *model.ChatMember, err error)) *ChatMemberRepositoryMock {
	if mmGet.defaultExpectation != nil {
		mmGet.mock.t.Fatalf("Default expectation is already set for the ChatMemberRepository.Get method")
	}

	if len(mmGet.expectations) > 0 {
		mmGet.mock.t.Fatalf("Some expectations are already set for the ChatMemberRepository.Get method")
	}

	mmGet.mock.funcGet = f
	return mmGet.mock
}

// When sets expectation for the ChatMemberRepository.Get which will trigger the result defined by the following
// Then helper
func (mmGet *mChatMemberRepositoryMockGet) When(ctx context.Context, chatID int64, userID int64) *ChatMemberRepositoryMockGetExpectation {
	if mmGet.mock.funcGet != nil {
		mmGet.mock.t.Fatalf("ChatMemberRepositoryMock.Get mock is already set by Set")
	}

	expectation := &ChatMemberRepositoryMockGetExpectation{
		mock:   mmGet.mock,
		params: &ChatMemberRepositoryMockGetParams{ctx, chatID, userID},
	}
	mmGet.expectations = append(mmGet.expectations, expectation)
	return expectation
}

// Then sets up ChatMemberRepository.Get return parameters for the expectation previously defined by the When method
func (e *ChatMemberRepositoryMockGetExpectation) Then(cp1 *model.ChatMember, err error) *ChatMemberRepositoryMock {
	e.results = &ChatMemberRepositoryMockGetResults{cp1, err}
	return e.mock
}

// Times sets number of times ChatMemberRepository.Get should be invoked
func (mmGet *mChatMemberRepositoryMockGet) Times(n uint64) *mChatMemberRepositoryMockGet {
	if n == 0 {
		mmGet.mock.t.Fatalf("Times of ChatMemberRepositoryMock.Get mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmGet.expectedInvocations, n)
	return mmGet
}

func (mmGet *mChatMemberRepositoryMockGet) invocationsDone() bool {
	if len(mmGet.expectations) == 0 && mmGet.defaultExpectation == nil && mmGet.mock.funcGet == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmGet.mock.afterGetCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmGet.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// Get implements repository.ChatMemberRepository
func (mmGet *ChatMemberRepositoryMock) Get(ctx context.Context, chatID int64, userID int64) (cp1 *model.ChatMember, err error) {
	mm_atomic.AddUint64(&mmGet.beforeGetCounter, 1)
	defer mm_atomic.AddUint64(&mmGet.afterGetCounter, 1)

	if mmGet.inspectFuncGet != nil {
		mmGet.inspectFuncGet(ctx, chatID, userID)
	}

	mm_params := ChatMemberRepositoryMockGetParams{ctx, chatID, userID}

	// Record call args
	mmGet.GetMock.mutex.Lock()
	mmGet.GetMock.callArgs = append(mmGet.GetMock.callArgs, &mm_params)
	mmGet.GetMock.mutex.Unlock()

	for _, e := range mmGet.GetMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.cp1, e.results.err
		}
	}

	if mmGet.GetMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmGet.GetMock.defaultExpectation.Counter, 1)
		mm_want := mmGet.GetMock.defaultExpectation.params
		mm_want_ptrs := mmGet.GetMock.defaultExpectation.paramPtrs

		mm_got := ChatMemberRepositoryMockGetParams{ctx, chatID, userID}

		if mm_want_ptrs != nil {

			if mm_want_ptrs.ctx != nil && !minimock.Equal(*mm_want_ptrs.ctx, mm_got.ctx) {
				mmGet.t.Errorf("ChatMemberRepositoryMock.Get got unexpected parameter ctx, want: %#v, got: %#v%s\n", *mm_want_ptrs.ctx, mm_got.ctx, minimock.Diff(*mm_want_ptrs.ctx, mm_got.ctx))
			}

			if mm_want_ptrs.chatID != nil && !minimock.Equal(*mm_want_ptrs.chatID, mm_got.chatID) {
				mmGet.t.Errorf("ChatMemberRepositoryMock.Get got unexpected parameter chatID, want: %#v, got: %#v%s\n", *mm_want_ptrs.chatID, mm_got.chatID, minimock.Diff(*mm_want_ptrs.chatID, mm_got.chatID))
			}

			if mm_want_ptrs.userID != nil && !minimock.Equal(*mm_want_ptrs.userID, mm_got.userID) {
				mmGet.t.Errorf("ChatMemberRepositoryMock.Get got unexpected parameter userID, want: %#v, got: %#v%s\n", *mm_want_ptrs.userID, mm_got.userID, minimock.Diff(*mm_want_ptrs.userID, mm_got.userID))
			}

		} else if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmGet.t.Errorf("ChatMemberRepositoryMock.Get got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmGet.GetMock.defaultExpectation.results
		if mm_results == nil {
			mmGet.t.Fatal("No results are set for the ChatMemberRepositoryMock.Get")
		}
		return (*mm_results).cp1, (*mm_results).err
	}
	if mmGet.funcGet != nil {
		return mmGet.funcGet(ctx, chatID, userID)
	}
	mmGet.t.Fatalf("Unexpected call to ChatMemberRepositoryMock.Get. %v %v %v", ctx, chatID, userID)
	return
}

// GetAfterCounter returns a count of finished ChatMemberRepositoryMock.Get invocations
func (mmGet *ChatMemberRepositoryMock) GetAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGet.afterGetCounter)
}

// GetBeforeCounter returns a count of ChatMemberRepositoryMock.Get invocations
func (mmGet *ChatMemberRepositoryMock) GetBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGet.beforeGetCounter)
}

// Calls returns a list of arguments used in each call to ChatMemberRepositoryMock.Get.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmGet *mChatMemberRepositoryMockGet) Calls() []*ChatMemberRepositoryMockGetParams {
	mmGet.mutex.RLock()

	argCopy := make([]*ChatMemberRepositoryMockGetParams, len(mmGet.callArgs))
	copy(argCopy, mmGet.callArgs)

	mmGet.mutex.RUnlock()

	return argCopy
}

// MinimockGetDone returns true if the count of the Get invocations corresponds
// the number of defined expectations
func (m *ChatMemberRepositoryMock) MinimockGetDone() bool {
	if m.GetMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.GetMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.GetMock.invocationsDone()
}

// MinimockGetInspect logs each unmet expectation
func (m *ChatMemberRepositoryMock) MinimockGetInspect() {
	for _, e := range m.GetMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to ChatMemberRepositoryMock.Get with params: %#v", *e.params)
		}
	}

	afterGetCounter := mm_atomic.LoadUint64(&m.afterGetCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.GetMock.defaultExpectation != nil && afterGetCounter < 1 {
		if m.GetMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to ChatMemberRepositoryMock.Get")
		} else {
			m.t.Errorf("Expected call to ChatMemberRepositoryMock.Get with params: %#v", *m.GetMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGet != nil && afterGetCounter < 1 {
		m.t.Error("Expected call to ChatMemberRepositoryMock.Get")
	}

	if !m.GetMock.invocationsDone() && afterGetCounter > 0 {
		m.t.Errorf("Expected %d calls to ChatMemberRepositoryMock.Get but found %d calls",
			mm_atomic.LoadUint64(&m.GetMock.expectedInvocations), afterGetCounter)
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *ChatMemberRepositoryMock) MinimockFinish() {
	m.finishOnce.Do(func() {
		if !m.minimockDone() {
			m.MinimockCreateBatchInspect()

			m.MinimockGetInspect()
			m.t.FailNow()
		}
	})
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *ChatMemberRepositoryMock) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *ChatMemberRepositoryMock) minimockDone() bool {
	done := true
	return done &&
		m.MinimockCreateBatchDone() &&
		m.MinimockGetDone()
}
